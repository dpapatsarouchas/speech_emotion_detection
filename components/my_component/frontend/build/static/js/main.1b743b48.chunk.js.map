{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyComponent","props","render","args","theme","style","borderStyling","state","isFocused","primaryColor","border","outline","record","className","mimeType","onStop","onData","channelCount","strokeColor","backgroundColor","onClick","startRecording","type","stopRecording","setState","numClicks","recordedBlob","console","log","a","Streamlit","setComponentValue","xhr","XMLHttpRequest","onload","e","this","readyState","target","responseText","fd","FormData","append","blob","prefix","window","location","hostname","includes","open","send","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gSAmBMA,E,kDACJ,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAUDC,OAAS,WAGD,EAAKD,MAAME,KAAX,KAAb,IAKQC,EAAU,EAAKH,MAAfG,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKC,MAAMC,UAAYJ,EAAMK,aAAe,QAE9CJ,EAAMK,OAASJ,EACfD,EAAMM,QAAUL,EAOlB,OACE,6BACE,kBAAC,WAAD,CACEM,OAAQ,EAAKL,MAAMK,OACnBC,UAAU,aACVC,SAAS,YACTC,OAAQ,EAAKA,OACbC,OAAQ,EAAKA,OACbC,aAAc,EACdC,YAAY,UACZC,gBAAgB,YAClB,4BAAQC,QAAS,EAAKC,eAAgBC,KAAK,UAA3C,SACA,4BAAQF,QAAS,EAAKG,cAAeD,KAAK,UAA1C,UAlDkB,EAyDxBD,eAAiB,WACf,EAAKG,SAAS,CAAEZ,QAAQ,KA1DF,EA6DxBW,cAAgB,WACd,EAAKC,SACH,CAAEZ,QAAQ,KA7DZ,EAAKL,MAAQ,CACXK,QAAQ,EACRa,UAAW,EACXjB,WAAW,GALS,E,0CAmExB,SAAOkB,GACLC,QAAQC,IAAI,+BAAgCF,K,2DAG9C,WAAaA,GAAb,mBAAAG,EAAA,sDACEF,QAAQC,IAAI,mBAAoBF,GAEhCI,IAAUC,kBAAkBL,IAExBM,EAAI,IAAIC,gBACRC,OAAO,SAASC,GACO,IAApBC,KAAKC,YACJV,QAAQC,IAAI,oBAAoBO,EAAEG,OAAOC,gBAG7CC,EAAG,IAAIC,UACRC,OAAO,aAAahB,EAAaiB,KAAM,YACpCC,EAASC,OAAOC,SAASC,SAASC,SAAS,cAAgBH,OAAOC,SAASC,SAASC,SAAS,aAAe,wBAA0B,GAC5IhB,EAAIiB,KAAK,OAAOL,EAAS,mBAAkB,GAC3CZ,EAAIkB,KAAKV,GAfX,2C,4DAxEwBW,KAgGXC,cAAwBpD,GC/GvCqD,IAASnD,OACP,kBAAC,IAAMoD,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1b743b48.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n// Import react-mic\nimport { ReactMic } from 'react-mic';\n\ninterface State {\n  record: boolean\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      record: false,\n      numClicks: 0,\n      isFocused: false\n    }\n  }\n  \n  // public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <div>\n        <ReactMic\n          record={this.state.record}\n          className=\"sound-wave\"\n          mimeType=\"audio/wav\"\n          onStop={this.onStop}\n          onData={this.onData}\n          channelCount={1}\n          strokeColor=\"#000000\"\n          backgroundColor=\"#FFFFFF\" />\n        <button onClick={this.startRecording} type=\"button\">Start</button>\n        <button onClick={this.stopRecording} type=\"button\">Stop</button>\n      </div>\n\n    )\n  }\n\n  // React-mic\n  startRecording = () => {\n    this.setState({ record: true });\n  }\n \n  stopRecording = () => {\n    this.setState(\n      { record: false },\n    );\n  }\n \n  onData(recordedBlob: any) {\n    console.log('chunk of real-time data is: ', recordedBlob);\n  }\n \n  async onStop(recordedBlob: any) {\n    console.log('recordedlob is: ', recordedBlob);\n    \n    Streamlit.setComponentValue(recordedBlob)\n\n    var xhr=new XMLHttpRequest();\n    xhr.onload=function(e: any) {\n        if(this.readyState === 4) {\n            console.log(\"Server returned: \",e.target.responseText);\n        }\n    };\n    var fd=new FormData();\n    fd.append(\"audio_data\",recordedBlob.blob, 'test.wav');\n    const prefix = window.location.hostname.includes(\"localhost\") || window.location.hostname.includes(\"127.0.0.1\") ? \"http://localhost:5000\" : \"\";\n    xhr.open(\"POST\",prefix + \"/api/save_audio\",true);\n    xhr.send(fd);\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}